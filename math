#!/usr/bin/env python

from __future__ import print_function
from collections import Counter
import fileinput
import sys
import os


class Switch(object):
    """    
    Lifted verbatim from http://code.activestate.com/recipes/410692/
    """

    def __init__(self, value):
        self.value = value
        self.fall = False

    def __iter__(self):
        """Return the match method once, then stop"""
        yield self.match
        raise StopIteration

    def match(self, *args):
        """Indicate whether or not to enter a case suite"""
        if self.fall or not args:
            return True
        elif self.value in args:  # changed for v1.5, see below
            self.fall = True
            return True
        else:
            return False


# A utility method from http://stackoverflow.com/questions/379906/parse-string-to-float-or-int:
def num(s):
    try:
        return int(s)
    except ValueError:
        return float(s)


# The calculations

def add(f):
    """
    """
    x = 0
    line = ""
    try:
        for line in f.input():
            x += num(line)
        print(x)
    except ValueError:
        print("Not a number: " + line, file=sys.stderr)
        sys.exit(65)


def mean(f):
    """
    """
    x = 0
    line = ""
    try:
        for line in f.input():
            x += num(line)
        print(x / f.filelineno())
    except ValueError:
        print("Not a number: " + line, file=sys.stderr)
        sys.exit(66)


def median(f):
    """
    """
    l = list()
    line = ""
    try:
        for line in f.input():
            l.append(num(line.rstrip()))
        l.sort()
        middle = fileinput.filelineno() / 2
        print(l[middle])
    except ValueError:
        print("Not a number: " + line, file=sys.stderr)
        sys.exit(67)


def mode(f):
    """
    """
    data = Counter(f.input())
    mode_as_list_of_tuples = data.most_common(1)  # Returns the highest occurring item
    print(mode_as_list_of_tuples[0][0].rstrip(), file=sys.stdout)
    print(mode_as_list_of_tuples[0][1], file=sys.stderr)


def rrange(f):
    """
    """
    f_input = f.input()
    print(type(f_input))
    print(min(f_input()).rstrip())
    print(max(f_input()).rstrip())

# Figure out which method we need to call based on the name of this script

try:
    v = os.path.basename(sys.argv[0])
    for case in Switch(v):
        if case('add'):
            add(fileinput)
            break
        if case('mean'):
            mean(fileinput)
            break
        if case('median'):
            median(fileinput)
            break
        if case('mode'):
            mode(fileinput)
            break
        if case('max'):
            print(max(fileinput.input()).rstrip())
            break
        if case('min'):
            print(min(fileinput.input()).rstrip())
            break
        if case('range'):
            rrange(fileinput)
            break
        if case():  # default, could also just omit condition or 'if True'
            sys.exit("Script should be named either 'add', 'mean', 'median', 'mode' or 'range'.")
            # No need to break here, it'll stop anyway
except KeyboardInterrupt:
    sys.exit(129)
except IOError:
        print("No such file", file=sys.stderr)
        sys.exit(68)